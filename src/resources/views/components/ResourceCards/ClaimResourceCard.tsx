import React, {
  useState,
  useEffect,
  useRef,
  useCallback,
  useMemo,
} from "react";
import { DocumentCategoryResponseData } from "@/app/Repositories/DocumentCategory/data";
import { BaseRepository } from "@/app/Repositories/BaseRepository";
import { ClaimResponseData } from "@/app/Repositories/Claim/data";
import { usePaperBoard } from "app/Context/PaperBoardContext";
import useDirectories from "app/Hooks/useDirectories";
import { useAuth } from "app/Context/AuthContext";
import useClaimCalculator from "app/Hooks/useClaimCalculator";
import {
  DeskComponentPropTypes,
  SheetProps,
} from "../../pages/DocumentTemplateContent";
import { DataOptionsProps } from "../forms/MultiSelect";
import { ExpenseResponseData } from "@/app/Repositories/Expense/data";
import TextInput from "../forms/TextInput";
import MultiSelect from "../forms/MultiSelect";
import { formatOptions } from "app/Support/Helpers";
import Select from "../forms/Select";
import Box from "../forms/Box";
import { ContentBlock } from "../../crud/DocumentTemplateBuilder";
import { ExpenseContentProps } from "../ContentCards/ExpenseContentCard";

interface ClaimResourceCardProps {
  category: DocumentCategoryResponseData;
  repository: BaseRepository;
}

const ClaimResourceCard: React.FC<ClaimResourceCardProps> = ({
  category,
  repository,
}) => {
  const { staff } = useAuth();
  const { state, actions } = usePaperBoard();
  const { collection: departments } = useDirectories(repository, "departments");
  const { getDistance, calculate, cities, allowances } = useClaimCalculator();
  const [dependencies, setDependencies] = useState<unknown>(null);

  const identifier: DeskComponentPropTypes = "expense";

  // Debug logging removed for production

  const expenseState = useMemo(() => {
    return state.resourceLinks.find((link) => link.type === identifier);
  }, [state.resourceLinks, identifier]);

  const [claimState, setClaimState] = useState<ClaimResponseData>({
    route: "one-way", // Set default route
  } as ClaimResponseData);

  // Use ref to store getDistance to prevent infinite API calls
  const getDistanceRef = useRef(getDistance);

  // Update ref when getDistance changes
  useEffect(() => {
    getDistanceRef.current = getDistance;
  }, [getDistance]);

  const [selectedOptions, setSelectedOptions] = useState<{
    departure_city: DataOptionsProps | null;
    destination_city: DataOptionsProps | null;
    sponsoring_department: DataOptionsProps | null;
    airport: DataOptionsProps | null;
  }>({
    departure_city: null,
    destination_city: null,
    sponsoring_department: null,
    airport: null,
  });

  // Use ref to track current claimState to avoid infinite loops
  const claimStateRef = useRef(claimState);

  // Update ref when claimState changes
  useEffect(() => {
    claimStateRef.current = claimState;
  }, [claimState]);

  const handleSelectionChange = useCallback(
    (key: keyof typeof selectedOptions) => (newValue: unknown) => {
      const updatedValue = newValue as DataOptionsProps;
      setSelectedOptions((prev) => ({ ...prev, [key]: updatedValue }));
      if (key === "sponsoring_department") {
        actions.setDepartmentOwner(updatedValue);
      }
      setClaimState((prev) => ({
        ...prev,
        [`${key}_id`]: updatedValue?.value,
      }));
    },
    []
  );

  useEffect(() => {
    const shouldRun = !!(
      claimStateRef.current.start_date &&
      claimStateRef.current.end_date &&
      claimStateRef.current.departure_city_id &&
      claimStateRef.current.destination_city_id &&
      claimStateRef.current.airport_id &&
      claimStateRef.current.resident_type &&
      claimStateRef.current.distance &&
      claimStateRef.current.mode &&
      staff &&
      selectedOptions.departure_city &&
      selectedOptions.destination_city &&
      selectedOptions.airport
    );

    if (!shouldRun) return;

    const autoGeneratedExpenses: ExpenseResponseData[] = calculate(
      staff.remunerations ?? [],
      staff.grade_level_id,
      claimStateRef.current.start_date,
      claimStateRef.current.end_date,
      selectedOptions.departure_city,
      selectedOptions.destination_city,
      claimStateRef.current.mode as "flight" | "road",
      claimStateRef.current.resident_type === "resident",
      claimStateRef.current.distance ?? 0,
      claimStateRef.current.route ?? "one-way",
      selectedOptions.airport
    );

    setClaimState((prev) => ({
      ...prev,
      expenses: autoGeneratedExpenses,
    }));
    // actions.setExpenses(autoGeneratedExpenses);
  }, [
    selectedOptions.departure_city,
    selectedOptions.destination_city,
    selectedOptions.airport,
    staff,
    calculate,
    claimState.start_date,
    claimState.end_date,
    claimState.departure_city_id,
    claimState.destination_city_id,
    claimState.airport_id,
    claimState.resident_type,
    claimState.distance,
    claimState.mode,
    claimState.route,
  ]);

  useEffect(() => {
    const shouldRun = !!(
      selectedOptions.departure_city && selectedOptions.destination_city
    );
    if (!shouldRun) return;

    getDistanceRef
      .current(
        String(selectedOptions.departure_city?.label) ?? "",
        String(selectedOptions.destination_city?.label) ?? ""
      )
      .then((res) => {
        const computedDistance = res ?? 0;
        const travelMode = computedDistance > 300 ? "flight" : "road";

        setClaimState((prev) => ({
          ...prev,
          distance: computedDistance,
          mode: travelMode,
        }));
      });
  }, [selectedOptions.departure_city, selectedOptions.destination_city]);

  useEffect(() => {
    if (expenseState) {
      const updatedItem: ContentBlock = {
        ...expenseState,
        content: {
          ...expenseState.content,
          expense: {
            claim: claimStateRef.current,
            expenses: claimStateRef.current.expenses,
            dependencies,
          } as ExpenseContentProps,
        } as SheetProps,
      };

      const newBody = state.body.map((bodyItem) =>
        bodyItem.id === expenseState.id ? updatedItem : bodyItem
      );

      actions.setBody(newBody);
    }
  }, [expenseState, claimState.expenses]);

  useEffect(() => {
    if (state.existingDocument) {
      const existingClaim = state.existingDocument
        .documentable as unknown as ClaimResponseData;
      // Existing claim data processed

      setClaimState((prev) => ({
        ...prev,
        start_date: existingClaim.start_date || "",
        end_date: existingClaim.end_date || "",
        departure_city_id: existingClaim.departure_city_id,
        destination_city_id: existingClaim.destination_city_id,
        airport_id: existingClaim.airport_id,
        sponsoring_department_id: existingClaim.sponsoring_department_id,
        resident_type: existingClaim.resident_type,
        distance: existingClaim.distance,
        mode: existingClaim.mode,
        route: existingClaim.route,
      }));

      const departure_city = formatOptions(cities, "id", "name").find(
        (city) => city.value === existingClaim.departure_city_id
      );
      const destination_city = formatOptions(cities, "id", "name").find(
        (city) => city.value === existingClaim.destination_city_id
      );
      const airport = formatOptions(cities, "id", "name").find(
        (city) => city.value === existingClaim.airport_id
      );
      const sponsoring_department = formatOptions(
        departments,
        "id",
        "abv"
      ).find((dept) => dept.value === existingClaim.sponsoring_department_id);

      setSelectedOptions((prev) => ({
        ...prev,
        departure_city: departure_city ?? null,
        destination_city: destination_city ?? null,
        airport: airport ?? null,
        sponsoring_department: sponsoring_department ?? null,
      }));
    }
  }, [state.existingDocument, cities, departments]);

  useEffect(() => {
    const getDependencies = async () => {
      const dependencies = await repository.dependencies();
      setDependencies(dependencies);
    };

    getDependencies();
  }, [repository]);

  // Debug logging removed for production

  return (
    <div className="document__generator__container">
      <div className="row">
        <div className="col-md-12 mb-5">
          <h5>Claim Details</h5>

          <div className="claim__item__details flex start column">
            <small>Distance: {claimState.distance ?? 0} km</small>
            <small>Mode of Transport: {claimState.mode ?? "Flight"}</small>
          </div>
        </div>
        <div className="col-md-6 mb-3">
          <TextInput
            label="Event start Date"
            name="start_date"
            value={claimState.start_date}
            onChange={(e) => {
              setClaimState((prev) => ({
                ...prev,
                start_date: e.target.value,
              }));
            }}
            type="date"
          />
        </div>
        <div className="col-md-6 mb-3">
          <TextInput
            label="Event end Date"
            name="end_date"
            value={claimState.end_date}
            onChange={(e) => {
              setClaimState((prev) => ({
                ...prev,
                end_date: e.target.value,
              }));
            }}
            type="date"
          />
        </div>

        <div className="col-md-12 mb-3">
          <MultiSelect
            label="Takeoff City"
            options={formatOptions(cities, "id", "name")}
            value={selectedOptions.departure_city}
            onChange={handleSelectionChange("departure_city")}
            placeholder="Takeoff City"
          />
        </div>
        <div className="col-md-12 mb-3">
          <MultiSelect
            label="Destination City"
            options={formatOptions(cities, "id", "name")}
            value={selectedOptions.destination_city}
            onChange={handleSelectionChange("destination_city")}
            placeholder="Destination City"
            isDisabled={!selectedOptions.departure_city}
          />
        </div>
        <div className="col-md-7 mb-3">
          <MultiSelect
            label="Airport"
            options={formatOptions(
              cities.filter((city) => city.has_airport),
              "id",
              "name"
            )}
            value={selectedOptions.airport}
            onChange={handleSelectionChange("airport")}
            placeholder="Airport"
          />
        </div>
        <div className="col-md-5 mb-3">
          <MultiSelect
            label="Sponsor"
            options={formatOptions(departments, "id", "abv")}
            value={selectedOptions.sponsoring_department}
            onChange={handleSelectionChange("sponsoring_department")}
            placeholder="Department"
          />
        </div>
        <div className="col-md-12 mb-3">
          <Select
            label="Resident Type"
            labelKey="label"
            valueKey="value"
            value={claimState.resident_type}
            name="resident_type"
            options={[
              { label: "Resident", value: "resident" },
              { label: "Non-Resident", value: "non-resident" },
            ]}
            onChange={(e) => {
              setClaimState((prev) => ({
                ...prev,
                resident_type: e.target.value as "resident" | "non-resident",
              }));
            }}
            defaultValue=""
            size="xl"
          />
        </div>
        <div className="col-md-12 mb-3">
          <Box
            label={claimState.route === "return" ? "Return" : "One Way"}
            isChecked={claimState.route === "return"}
            onChange={(e) => {
              const isChecked = e.target.checked;
              const newRoute = isChecked ? "return" : "one-way";

              setClaimState((prev) => ({
                ...prev,
                route: newRoute,
              }));
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default ClaimResourceCard;
